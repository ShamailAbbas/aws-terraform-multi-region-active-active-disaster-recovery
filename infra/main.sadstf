##################################################
# GLOBAL CONFIG
##################################################
terraform {
  required_version = ">=1.10.0"

  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.primary_region
  alias  = "primary"
}

provider "aws" {
  region = var.secondary_region
  alias  = "secondary"
}

##################################################
# VARIABLES
##################################################
variable "project_name" { default = "multi-region-app" }
variable "primary_region" { default = "us-east-1" }
variable "secondary_region" { default = "us-east-2" }
variable "db_username" { default = "adminuser" }
variable "db_password" { default = "YourSecurePassword123!" }
variable "instance_type" { default = "t3.micro" }
variable "ami" { default = "ami-0360c520857e3138f" }

##################################################
# PRIMARY REGION (us-east-1)
##################################################

# --- VPC ---
resource "aws_vpc" "primary_vpc" {
  provider   = aws.primary
  cidr_block = "10.0.0.0/16"
  tags       = { Name = "${var.project_name}-primary-vpc" }
}

# --- SUBNETS (2x Public, 2x Private) ---
resource "aws_subnet" "primary_public_a" {
  provider                = aws.primary
  vpc_id                  = aws_vpc.primary_vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "${var.primary_region}a"
  map_public_ip_on_launch = true
  tags                    = { Name = "${var.project_name}-primary-public-a" }
}

resource "aws_subnet" "primary_public_b" {
  provider                = aws.primary
  vpc_id                  = aws_vpc.primary_vpc.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "${var.primary_region}b"
  map_public_ip_on_launch = true
  tags                    = { Name = "${var.project_name}-primary-public-b" }
}

resource "aws_subnet" "primary_private_a" {
  provider          = aws.primary
  vpc_id            = aws_vpc.primary_vpc.id
  cidr_block        = "10.0.3.0/24"
  availability_zone = "${var.primary_region}a"
  tags              = { Name = "${var.project_name}-primary-private-a" }
}

resource "aws_subnet" "primary_private_b" {
  provider          = aws.primary
  vpc_id            = aws_vpc.primary_vpc.id
  cidr_block        = "10.0.4.0/24"
  availability_zone = "${var.primary_region}b"
  tags              = { Name = "${var.project_name}-primary-private-b" }
}

# --- INTERNET GATEWAY / ROUTE TABLES ---
resource "aws_internet_gateway" "primary_igw" {
  provider = aws.primary
  vpc_id   = aws_vpc.primary_vpc.id
}

resource "aws_route_table" "primary_public_rt" {
  provider = aws.primary
  vpc_id   = aws_vpc.primary_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.primary_igw.id
  }
}

resource "aws_route_table_association" "primary_public_a_assoc" {
  provider       = aws.primary
  subnet_id      = aws_subnet.primary_public_a.id
  route_table_id = aws_route_table.primary_public_rt.id
}

resource "aws_route_table_association" "primary_public_b_assoc" {
  provider       = aws.primary
  subnet_id      = aws_subnet.primary_public_b.id
  route_table_id = aws_route_table.primary_public_rt.id
}

# --- SECURITY GROUP ---
resource "aws_security_group" "primary_sg" {
  provider = aws.primary
  vpc_id   = aws_vpc.primary_vpc.id
  name     = "${var.project_name}-primary-sg"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 5432
    to_port     = 5432
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# --- IAM ROLE FOR EC2 ---
resource "aws_iam_role" "ec2_role" {
  name               = "${var.project_name}-ec2-role"
  assume_role_policy = data.aws_iam_policy_document.ec2_assume.json
}

data "aws_iam_policy_document" "ec2_assume" {
  statement {
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["ec2.amazonaws.com"]
    }
  }
}

resource "aws_iam_role_policy_attachment" "ec2_attach" {
  role       = aws_iam_role.ec2_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

resource "aws_iam_instance_profile" "ec2_profile" {
  name = "${var.project_name}-ec2-profile"
  role = aws_iam_role.ec2_role.name
}

# --- RDS (MULTI-AZ) ---
resource "aws_db_subnet_group" "primary_db_subnet" {
  provider   = aws.primary
  name       = "${var.project_name}-primary-dbsubnet"
  subnet_ids = [aws_subnet.primary_private_a.id, aws_subnet.primary_private_b.id]
}

resource "aws_db_instance" "primary_db" {
  provider               = aws.primary
  identifier             = "${var.project_name}-primary-db"
  engine                 = "postgres"
  instance_class         = "db.t3.micro"
  allocated_storage      = 20
  username               = var.db_username
  password               = var.db_password
  db_subnet_group_name   = aws_db_subnet_group.primary_db_subnet.name
  vpc_security_group_ids = [aws_security_group.primary_sg.id]
  multi_az               = true
  skip_final_snapshot    = true
  publicly_accessible    = false
}

# --- EC2 BACKEND + ALB ---


resource "aws_launch_template" "primary_backend" {
  provider      = aws.primary
  name_prefix   = "${var.project_name}-primary-backend"
  image_id      = var.ami
  instance_type = var.instance_type
  iam_instance_profile {
    name = aws_iam_instance_profile.ec2_profile.name
  }
  vpc_security_group_ids = [aws_security_group.primary_sg.id]

  user_data = base64encode(<<EOF
#!/bin/bash
sudo apt update -y
sudo apt install -y nginx
echo "Primary Backend - $(hostname)" > /var/www/html/index.html
EOF
  )
}

resource "aws_lb" "primary_alb" {
  provider           = aws.primary
  name               = "${var.project_name}-primary-alb"
  internal           = false
  load_balancer_type = "application"
  subnets            = [aws_subnet.primary_public_a.id, aws_subnet.primary_public_b.id]
  security_groups    = [aws_security_group.primary_sg.id]
}

resource "aws_lb_target_group" "primary_tg" {
  provider = aws.primary
  name     = "${var.project_name}-primary-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.primary_vpc.id
}

resource "aws_lb_listener" "primary_listener" {
  provider          = aws.primary
  load_balancer_arn = aws_lb.primary_alb.arn
  port              = 80
  protocol          = "HTTP"
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.primary_tg.arn
  }
}

resource "aws_autoscaling_group" "primary_asg" {
  provider         = aws.primary
  desired_capacity = 2
  max_size         = 3
  min_size         = 1
  launch_template {
    id      = aws_launch_template.primary_backend.id
    version = "$Latest"
  }
  vpc_zone_identifier = [aws_subnet.primary_public_a.id, aws_subnet.primary_public_b.id]
  target_group_arns   = [aws_lb_target_group.primary_tg.arn]
  depends_on          = [aws_lb_listener.primary_listener]
}

##################################################
# SECONDARY REGION (us-west-2)
##################################################

# --- VPC / SUBNETS ---
resource "aws_vpc" "secondary_vpc" {
  provider   = aws.secondary
  cidr_block = "10.1.0.0/16"
  tags       = { Name = "${var.project_name}-secondary-vpc" }
}

resource "aws_subnet" "secondary_public_a" {
  provider                = aws.secondary
  vpc_id                  = aws_vpc.secondary_vpc.id
  cidr_block              = "10.1.1.0/24"
  availability_zone       = "${var.secondary_region}a"
  map_public_ip_on_launch = true
  tags                    = { Name = "${var.project_name}-secondary-public-a" }
}

resource "aws_subnet" "secondary_public_b" {
  provider                = aws.secondary
  vpc_id                  = aws_vpc.secondary_vpc.id
  cidr_block              = "10.1.2.0/24"
  availability_zone       = "${var.secondary_region}b"
  map_public_ip_on_launch = true
  tags                    = { Name = "${var.project_name}-secondary-public-b" }
}

resource "aws_internet_gateway" "secondary_igw" {
  provider = aws.secondary
  vpc_id   = aws_vpc.secondary_vpc.id
}

resource "aws_route_table" "secondary_rt" {
  provider = aws.secondary
  vpc_id   = aws_vpc.secondary_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.secondary_igw.id
  }
}

resource "aws_route_table_association" "secondary_assoc_a" {
  provider       = aws.secondary
  subnet_id      = aws_subnet.secondary_public_a.id
  route_table_id = aws_route_table.secondary_rt.id
}

resource "aws_route_table_association" "secondary_assoc_b" {
  provider       = aws.secondary
  subnet_id      = aws_subnet.secondary_public_b.id
  route_table_id = aws_route_table.secondary_rt.id
}

resource "aws_security_group" "secondary_sg" {
  provider = aws.secondary
  vpc_id   = aws_vpc.secondary_vpc.id
  name     = "${var.project_name}-secondary-sg"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 5432
    to_port     = 5432
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# --- RDS Secondary ---
resource "aws_db_subnet_group" "secondary_db_subnet" {
  provider   = aws.secondary
  name       = "${var.project_name}-secondary-dbsubnet"
  subnet_ids = [aws_subnet.secondary_public_a.id, aws_subnet.secondary_public_b.id]
}

resource "aws_db_instance" "secondary_db" {
  provider               = aws.secondary
  identifier             = "${var.project_name}-secondary-db"
  engine                 = "postgres"
  instance_class         = "db.t3.micro"
  allocated_storage      = 20
  username               = var.db_username
  password               = var.db_password
  db_subnet_group_name   = aws_db_subnet_group.secondary_db_subnet.name
  vpc_security_group_ids = [aws_security_group.secondary_sg.id]
  multi_az               = true
  skip_final_snapshot    = true
}

# --- EC2 + ALB ---
resource "aws_launch_template" "secondary_backend" {
  provider               = aws.secondary
  name_prefix            = "${var.project_name}-secondary-backend"
  image_id               = "ami-0cfde0ea8edd312d4"
  instance_type          = var.instance_type
  vpc_security_group_ids = [aws_security_group.secondary_sg.id]
  user_data = base64encode(<<EOF
#!/bin/bash
sudo apt update -y
sudo apt install -y nginx
echo "Secondary Backend - $(hostname)" > /var/www/html/index.html
EOF
  )
}

resource "aws_lb" "secondary_alb" {
  provider           = aws.secondary
  name               = "${var.project_name}-secondary-alb"
  internal           = false
  load_balancer_type = "application"
  subnets            = [aws_subnet.secondary_public_a.id, aws_subnet.secondary_public_b.id]
  security_groups    = [aws_security_group.secondary_sg.id]
}

resource "aws_lb_target_group" "secondary_tg" {
  provider = aws.secondary
  name     = "${var.project_name}-secondary-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.secondary_vpc.id
}

resource "aws_lb_listener" "secondary_listener" {
  provider          = aws.secondary
  load_balancer_arn = aws_lb.secondary_alb.arn
  port              = 80
  protocol          = "HTTP"
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.secondary_tg.arn
  }
}

resource "aws_autoscaling_group" "secondary_asg" {
  provider         = aws.secondary
  desired_capacity = 2
  max_size         = 3
  min_size         = 1
  launch_template {
    id      = aws_launch_template.secondary_backend.id
    version = "$Latest"
  }
  vpc_zone_identifier = [aws_subnet.secondary_public_a.id, aws_subnet.secondary_public_b.id]
  target_group_arns   = [aws_lb_target_group.secondary_tg.arn]
  depends_on          = [aws_lb_listener.secondary_listener]
}

##################################################
# DMS (Cross-region DB replication)
##################################################

# DMS VPC Role
resource "aws_iam_role" "dms_vpc_role" {
  name = "dms-vpc-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "dms.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "dms_vpc_role_attach" {
  role       = aws_iam_role.dms_vpc_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole"
}

resource "aws_dms_replication_instance" "replicator" {
  provider                   = aws.primary
  replication_instance_id    = "${var.project_name}-dms-instance"
  replication_instance_class = "dms.t3.medium"
  allocated_storage          = 50
  publicly_accessible        = true
  vpc_security_group_ids     = [aws_security_group.primary_sg.id]
}

resource "aws_dms_endpoint" "source_db" {
  provider      = aws.primary
  endpoint_id   = "source-db-endpoint"
  endpoint_type = "source"
  engine_name   = "postgres"
  username      = var.db_username
  password      = var.db_password
  server_name   = aws_db_instance.primary_db.address
  port          = 5432
  database_name = "postgres"
}

resource "aws_dms_endpoint" "target_db" {
  provider      = aws.primary
  endpoint_id   = "target-db-endpoint"
  endpoint_type = "target"
  engine_name   = "postgres"
  username      = var.db_username
  password      = var.db_password
  server_name   = aws_db_instance.secondary_db.address
  port          = 5432
  database_name = "postgres"
}

resource "aws_dms_replication_task" "replication_task" {
  provider                 = aws.primary
  replication_task_id      = "${var.project_name}-replication-task"
  migration_type           = "cdc"
  replication_instance_arn = aws_dms_replication_instance.replicator.replication_instance_arn
  source_endpoint_arn      = aws_dms_endpoint.source_db.endpoint_arn
  target_endpoint_arn      = aws_dms_endpoint.target_db.endpoint_arn
  table_mappings           = <<EOF
{
  "rules": [{
    "rule-type": "selection",
    "rule-id": "1",
    "rule-name": "1",
    "object-locator": {
      "schema-name": "%",
      "table-name": "%"
    },
    "rule-action": "include"
  }]
}
EOF
}

##################################################
# OUTPUTS
##################################################
output "primary_alb_dns" {
  value = aws_lb.primary_alb.dns_name
}

output "secondary_alb_dns" {
  value = aws_lb.secondary_alb.dns_name
}

output "primary_db_endpoint" {
  value = aws_db_instance.primary_db.address
}

output "secondary_db_endpoint" {
  value = aws_db_instance.secondary_db.address
}
